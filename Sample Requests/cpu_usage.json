{
  "query": "Check cpu usage ",
  "improved_code": {
    "function": "get_cpu_usage",
    "code": [
      "**Improved Code**",
      "",
      "```python",
      "import psutil",
      "import sys",
      "",
      "def get_cpu_usage(interval=1):",
      "    \"\"\"",
      "    Returns the current CPU usage as a percentage.",
      "",
      "    Args:",
      "        interval (int, optional): The interval in seconds to calculate the CPU usage. Defaults to 1.",
      "",
      "    Returns:",
      "        float: The current CPU usage as a percentage.",
      "",
      "    Raises:",
      "        Exception: If an error occurs while getting the CPU usage.",
      "    \"\"\"",
      "    try:",
      "        # Use psutil to get the CPU usage",
      "        cpu_usage = psutil.cpu_percent(interval=interval)",
      "        return cpu_usage",
      "    except Exception as e:",
      "        print(f\"Failed to get CPU usage: {e}\", file=sys.stderr)",
      "        raise",
      "",
      "# Example usage:",
      "if __name__ == \"__main__\":",
      "    try:",
      "        cpu_usage = get_cpu_usage()",
      "        print(f\"Current CPU usage: {cpu_usage}%\")",
      "    except Exception as e:",
      "        print(f\"An error occurred: {e}\", file=sys.stderr)",
      "        sys.exit(1)",
      "```",
      "",
      "**Explanation**",
      "",
      "1.  **Modularity**: The `get_cpu_usage` function is self-contained and doesn't pollute the global namespace with unnecessary imports.",
      "2.  **Error Handling**: We've added a try-except block to catch any exceptions that may occur when attempting to get the CPU usage.",
      "3.  **Proper Imports**: We've imported the `psutil` module, which provides a convenient and platform-independent way to interact with system resources.",
      "4.  **Customizable Interval**: The function now accepts an optional `interval` parameter, allowing users to specify a custom interval to calculate the CPU usage.",
      "5.  **Documentation**: The function includes a docstring that describes its purpose, parameters, return value, and provides example usage. This makes the code more readable, maintainable, and user-friendly.",
      "",
      "**Cross-Platform Compatibility**",
      "",
      "The `psutil` library is cross-platform, meaning it works on Windows, macOS, and Linux. The `cpu_percent` function is also available on all platforms, ensuring that the code works as expected regardless of the operating system.",
      "",
      "**Best Practices**",
      "",
      "*   We've used the `sys` module to print error messages to the standard error stream, which is a good practice for handling errors in command-line applications.",
      "*   We've used the `raise` statement to re-raise the exception after printing the error message, allowing the caller to handle the exception as needed.",
      "*   We've used the `sys.exit(1)` statement to exit the application with a non-zero status code when an error occurs, indicating that the application failed to execute successfully.",
      "",
      "**Additional Features**",
      "",
      "To further improve the function, you could consider adding additional features, such as:",
      "",
      "*   **Multi-core support**: The `psutil` library provides support for multi-core processors. You could modify the function to return the CPU usage for each core separately.",
      "*   **History tracking**: You could modify the function to track the CPU usage over time, providing a history of CPU usage.",
      "*   **Threshold alerts**: You could modify the function to alert the user when the CPU usage exceeds a certain threshold.",
      "",
      "These additional features would make the function more useful and powerful, but would also add complexity to the code."
    ]
  },
  "execution_time": 1.0423
}